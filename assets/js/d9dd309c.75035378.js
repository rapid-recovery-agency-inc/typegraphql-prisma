"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,y=u["".concat(d,".").concat(m)]||u[m]||l[m]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Emit redundant types info",sidebar_label:"Redundant types"},i=void 0,p={unversionedId:"advanced/emit-redundant-types-info",id:"advanced/emit-redundant-types-info",title:"Emit redundant types info",description:"By default, typegraphql-prisma tries to minimize the generated LOC by omitting the redundant types info.",source:"@site/../docs/advanced/emit-redundant-types-info.md",sourceDirName:"advanced",slug:"/advanced/emit-redundant-types-info",permalink:"/docs/advanced/emit-redundant-types-info",draft:!1,editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/emit-redundant-types-info.md",tags:[],version:"current",frontMatter:{title:"Emit redundant types info",sidebar_label:"Redundant types"},sidebar:"docs",previous:{title:"Prisma context key",permalink:"/docs/advanced/custom-prisma-context-key"},next:{title:"Overriding object decorator",permalink:"/docs/advanced/overriding-object-decorator"}},d={},s=[],c={toc:s};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"typegraphql-prisma")," tries to minimize the generated LOC by omitting the redundant types info."),(0,a.kt)("p",null,"However, if you need to have all the types info generated, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"emitRedundantTypesInfo")," generator option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3}","{3}":!0},'generator typegraphql {\n  provider               = "typegraphql-prisma"\n  emitRedundantTypesInfo = true\n}\n')),(0,a.kt)("p",null,"By using this option, the generated code will have all the types info emitted in a form of decorator payload (",(0,a.kt)("inlineCode",{parentName:"p"},"@Args(_type => AggregateCategoryArgs)"),"), even if it's redundant and not necessary."),(0,a.kt)("p",null,"However, thanks to this, you can use any other compiler that does not supports type metadata, like ",(0,a.kt)("inlineCode",{parentName:"p"},"esbuild"),", so you're not limited to using standard Typescript compiler with ",(0,a.kt)("inlineCode",{parentName:"p"},"emitDecoratorMetadata")," option enabled."))}l.isMDXComponent=!0}}]);