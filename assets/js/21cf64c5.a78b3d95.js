"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[202],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=a,f=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?i.createElement(f,l(l({ref:t},s),{},{components:n})):i.createElement(f,l({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5061:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={title:"Hiding Prisma model field in GraphQL schema",sidebar_label:"Hiding model fields"},l=void 0,o={unversionedId:"advanced/hiding-field",id:"advanced/hiding-field",title:"Hiding Prisma model field in GraphQL schema",description:"Hiding field in output types",source:"@site/../docs/advanced/hiding-field.md",sourceDirName:"advanced",slug:"/advanced/hiding-field",permalink:"/docs/advanced/hiding-field",draft:!1,editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/hiding-field.md",tags:[],version:"current",frontMatter:{title:"Hiding Prisma model field in GraphQL schema",sidebar_label:"Hiding model fields"},sidebar:"docs",previous:{title:"Exposing selected actions",permalink:"/docs/advanced/exposing-actions"},next:{title:"Adding model fields",permalink:"/docs/advanced/adding-fields"}},p={},d=[{value:"Hiding field in output types",id:"hiding-field-in-output-types",level:2},{value:"Hiding field in input types",id:"hiding-field-in-input-types",level:2},{value:"Hiding field in specific input types",id:"hiding-field-in-specific-input-types",level:3},{value:"Omit fields by default",id:"omit-fields-by-default",level:2},{value:"Overriding default omit settings",id:"overriding-default-omit-settings",level:3}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"hiding-field-in-output-types"},"Hiding field in output types"),(0,a.kt)("p",null,"Sometimes you may want to not expose some fields in GraphQL schema.\nTo achieve this, just put the ",(0,a.kt)("inlineCode",{parentName:"p"},"@TypeGraphQL.omit")," doc line above the model field definition in ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file, e.g:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{4}","{4}":!0},"model User {\n  id        Int     @default(autoincrement()) @id\n  email     String  @unique\n  /// @TypeGraphQL.omit(output: true)\n  password  String\n  posts     Post[]\n}\n")),(0,a.kt)("p",null,"Thanks to that, the field won't show up in the GraphQL schema representation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  id: Int!\n  email: String!\n  posts: [Post!]!\n}\n")),(0,a.kt)("h2",{id:"hiding-field-in-input-types"},"Hiding field in input types"),(0,a.kt)("p",null,"However, the prisma model field will be still visible in all input types, like ",(0,a.kt)("inlineCode",{parentName:"p"},"UserWhereInput")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"UserCreateInput"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{3}","{3}":!0},"input UserCreateInput {\n  email: String!\n  password: String!\n  posts: PostCreateManyWithoutAuthorInput!\n}\n")),(0,a.kt)("p",null,"In order to hide the input fields as well, you need to provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"input: true")," option to ",(0,a.kt)("inlineCode",{parentName:"p"},"@TypeGraphQL.omit"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{4}","{4}":!0},"model User {\n  id        Int     @default(autoincrement()) @id\n  email     String  @unique\n  /// @TypeGraphQL.omit(output: true, input: true)\n  password  String\n  posts     Post[]\n}\n")),(0,a.kt)("p",null,"So that the field won't show anymore in all model-related input types, like ",(0,a.kt)("inlineCode",{parentName:"p"},"UserCreateInput"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"input UserCreateInput {\n  email: String!\n  posts: PostCreateManyWithoutAuthorInput!\n}\n")),(0,a.kt)("h3",{id:"hiding-field-in-specific-input-types"},"Hiding field in specific input types"),(0,a.kt)("p",null,"If you need more control over hiding field in input types, you can select input kinds by passing an array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{4}","{4}":!0},'model User {\n  id        Int     @default(autoincrement()) @id\n  email     String  @unique\n  /// @TypeGraphQL.omit(input: ["update", "where", "orderBy"])\n  password  String\n  posts     Post[]\n}\n')),(0,a.kt)("p",null,"The available options are: ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"'),",",(0,a.kt)("inlineCode",{parentName:"p"},'"update"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"where"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"orderBy"'),"."),(0,a.kt)("h2",{id:"omit-fields-by-default"},"Omit fields by default"),(0,a.kt)("p",null,"In some cases, it might become repetitive to add ",(0,a.kt)("inlineCode",{parentName:"p"},"@TypeGraphQL.omit")," to every field you want to hide.\nThat's why you can set in generator options to omit selected fields by default."),(0,a.kt)("p",null,"Basically, there are two options you can set in - ",(0,a.kt)("inlineCode",{parentName:"p"},"omitInputFieldsByDefault")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"omitOutputFieldsByDefault"),".\nThey both accept an array of field names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3,4}","{3,4}":!0},'generator typegraphql {\n  provider                  = "typegraphql-prisma"\n  omitInputFieldsByDefault  = ["createdAt", "updatedAt"]\n  omitOutputFieldsByDefault = ["password"]\n}\n')),(0,a.kt)("p",null,"The list is then used to compare against each model to find matching fields and apply the default omit settings to hide those fields."),(0,a.kt)("p",null,"Unfortunately, the Prisma parser for generator options is very limited and doesn't support complex objects, so for now the functionality is limited just to boolean-like behavior, with no options for granular control like ",(0,a.kt)("inlineCode",{parentName:"p"},'input: ["update", "where", "orderBy"]'),"."),(0,a.kt)("h3",{id:"overriding-default-omit-settings"},"Overriding default omit settings"),(0,a.kt)("p",null,"However, if you want to override the global default omit setting, you can just pass ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"@TypeGraphQL.omit"),", e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{4}","{4}":!0},"model User {\n  id        Int     @default(autoincrement()) @id\n  email     String  @unique\n  /// @TypeGraphQL.omit(output: false)\n  password  String\n  posts     Post[]\n}\n")),(0,a.kt)("p",null,"This way, the field will be still emitted in the GraphQL output type, even if the ",(0,a.kt)("inlineCode",{parentName:"p"},"omitOutputFieldsByDefault")," was set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"password"'),"."))}u.isMDXComponent=!0}}]);